[{"D:\\Examples\\ReactJS\\manage-map\\src\\cards\\index.js":"1","D:\\Examples\\ReactJS\\manage-map\\src\\form-uplaod-image\\index.js":"2","D:\\Examples\\ReactJS\\manage-map\\src\\index.js":"3","D:\\Examples\\ReactJS\\manage-map\\src\\detail\\index.js":"4","D:\\Examples\\ReactJS\\manage-map\\src\\reportWebVitals.js":"5","D:\\Examples\\ReactJS\\manage-map\\src\\App.js":"6","D:\\Examples\\ReactJS\\manage-map\\src\\home.js":"7","D:\\Examples\\ReactJS\\manage-map\\src\\services\\upload_image.js":"8","D:\\Examples\\ReactJS\\manage-map\\src\\detail\\popup.js":"9"},{"size":2527,"mtime":1612414183121,"results":"10","hashOfConfig":"11"},{"size":3185,"mtime":1612368784563,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1611368067234,"results":"13","hashOfConfig":"11"},{"size":11526,"mtime":1614232089856,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":1611368067234,"results":"15","hashOfConfig":"11"},{"size":913,"mtime":1614236983351,"results":"16","hashOfConfig":"11"},{"size":337,"mtime":1612368232075,"results":"17","hashOfConfig":"11"},{"size":0,"mtime":1612257777969,"results":"18","hashOfConfig":"11"},{"size":7520,"mtime":1612442163066,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"azwhr5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"D:\\Examples\\ReactJS\\manage-map\\src\\cards\\index.js",[],["42","43"],"D:\\Examples\\ReactJS\\manage-map\\src\\form-uplaod-image\\index.js",["44","45"],"import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport styles from './styles.module.css';\r\nimport axios from 'axios';\r\nfunction FormUploadImage(props) {\r\n\r\n  const { register, handleSubmit, reset, getValues, setValue } = useForm({\r\n    defaultValues: {\r\n      title: '',\r\n      image: '',\r\n      description: ''\r\n    }\r\n  });\r\n  const [imgData, setImgData] = useState(null);\r\n\r\n  const onChangeImage = event => {\r\n    let file = event.target.files[0];\r\n    if (file && file.type !== \"image/png\" && file.type !== \"image/jpg\" && file.type !== \"image/jpeg\") {\r\n      window.alert(\"File does not support. You must use .png or .jpg \");\r\n      setValue('image', '')\r\n      return false;\r\n    }\r\n    if (file && file.size > 500000) {\r\n      window.alert(\"Please upload a file smaller than 50 MB\");\r\n      setValue('image', '')\r\n      return false;\r\n    }\r\n    setImgData(event.target.files[0]);\r\n  };\r\n\r\n  const onSubmit = async (dataForm) => {\r\n    let fd = new FormData()\r\n    fd.append(\"title\", dataForm.title);\r\n    fd.append(\"image\", imgData);\r\n    fd.append(\"description\", dataForm.description);\r\n    try {\r\n      await axios({\r\n        method: 'POST',\r\n        url: process.env.REACT_APP_URL_API + '/upload-image',\r\n        data: fd,\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      }).then(response => {\r\n        props.setListMap(response.data?.dataMaps || []);\r\n        reset();\r\n        console.log(response.data)\r\n      }).catch(function (error) {\r\n        alert('Error ' + Object.assign({}, error).response.status);\r\n      })\r\n    } catch (error) {\r\n      console.log('Error', JSON.stringify(error))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)} className={styles.form} enctype=\"multipart/form-data\">\r\n        <TextField\r\n          className={styles.inputWidth100}\r\n          label=\"Title Map\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          required\r\n          name=\"title\"\r\n          autoComplete=\"off\"\r\n          InputLabelProps={{ shrink: true }}\r\n          inputRef={register}\r\n        />\r\n        <div className={`${styles.labelTitle} ${styles.inputWidth100}`}>\r\n          <input\r\n            type=\"file\"\r\n            name=\"image\"\r\n            required\r\n            ref={register}\r\n            onChange={(e) => onChangeImage(e)}\r\n          />\r\n        </div>\r\n        <TextField\r\n          className={`${styles.marginTopDown10} ${styles.inputWidth100}`}\r\n          label=\"Mo ta\"\r\n          name=\"description\"\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={5}\r\n          InputLabelProps={{ shrink: true }}\r\n          inputRef={register}\r\n        />\r\n        <div style={{ marginTop: 10 }}>\r\n          <Button type=\"reset\" style={{ marginRight: 10 }} variant=\"contained\" color=\"primary\">\r\n            {\"Reset\"}\r\n          </Button>\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            {\"LÆ°u\"}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n\r\n}\r\nexport default FormUploadImage","D:\\Examples\\ReactJS\\manage-map\\src\\index.js",[],"D:\\Examples\\ReactJS\\manage-map\\src\\detail\\index.js",["46","47","48","49","50","51","52"],"import { useParams } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DetailAreaDialogs from './popup';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: 10,\r\n        margin: 10\r\n    },\r\n    conImg: {\r\n        border: '1px solid #888',\r\n        width: 'fit-content',\r\n        marginTop: 10\r\n    },\r\n    conImgSvg: {\r\n        position: 'relative'\r\n    },\r\n    SVG: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0\r\n    },\r\n    conBtn: {\r\n        display: 'flex',\r\n    },\r\n    marginTop10: {\r\n        marginTop: 10\r\n    },\r\n    hoverSVG: {\r\n        \"&:hover\": {\r\n            fill: '#DA4567 !important',\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    leftMenu: {\r\n        height: '100%',\r\n        width: 250,\r\n        position: 'fixed',\r\n        right: 0,\r\n        top: 0,\r\n        webkitBoxShadow: '0px 2px 5px 1px rgba(187,187,187,1)',\r\n        mozBoxShadow: '0px 2px 5px 1px rgba(187,187,187,1)',\r\n        boxShadow: '0px 2px 5px 1px rgba(187,187,187,1)',\r\n        borderRadius: 3,\r\n        zIndex: 10\r\n    },\r\n    itemArea: {\r\n        margin: 10,\r\n        webkitBoxShadow: '0px 2px 5px 1px rgba(187,187,187,0.68)',\r\n        mozBoxShadow: '0px 2px 5px 1px rgba(187,187,187,0.68)',\r\n        boxShadow: '0px 2px 5px 1px rgba(187,187,187,0.68)',\r\n        padding: '8px 8px 10px',\r\n        lineHeight: 1,\r\n        borderRadius: 4,\r\n        cursor: 'pointer'\r\n    }\r\n\r\n});\r\n\r\nexport default function DetailMap(props) {\r\n    let { id } = useParams();\r\n    const { register, handleSubmit, reset, setValue, getValues } = useForm({\r\n        defaultValues: {\r\n            title: '',\r\n            coordinatesSVG: '',\r\n            map_id: id || ''\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const [listArea, setListArea] = useState([]);\r\n    const [dataMap, setDataMap] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [infoImg, setInfoImg] = useState(null);\r\n    const [isAdd, setAdd] = useState(false);\r\n    const [isOpenPopup, setOpenPopup] = useState(false);\r\n    const [dataDetail, setDataDetail] = useState({});\r\n    const [polygonPoint, setPolygonPoint] = useState('');\r\n    const [isOpenSuccess, setOpenSuccess] = useState(false);\r\n    const [svg, setSVG] = useState('');\r\n    const imageRef = useRef();\r\n\r\n    useEffect(() => {\r\n        try {\r\n            axios({\r\n                method: 'GET',\r\n                url: process.env.REACT_APP_URL_API + '/detail/' + id\r\n            }).then(response => {\r\n                if (response.data.success === \"Successfully\") {\r\n                    setDataMap(response.data.dataMap)\r\n                    setLoading(false)\r\n                }\r\n            }).catch(function (error) {\r\n                console.log('Error ' + (Object.assign({}, error).response?.status || ''));\r\n            })\r\n        } catch (error) {\r\n            console.log('error', JSON.stringify(error))\r\n        }\r\n\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        if (!isAdd) {\r\n            try {\r\n                axios({\r\n                    method: 'GET',\r\n                    url: process.env.REACT_APP_URL_API + '/list-area/' + id\r\n                }).then(response => {\r\n                    if (response.data.success === \"Successfully\") {\r\n                        console.log(response.data.listArea)\r\n                        setListArea(response.data.listArea)\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.log('Error ' + (Object.assign({}, error).response?.status || ''));\r\n                })\r\n            } catch (error) {\r\n                console.log('error', JSON.stringify(error))\r\n            }\r\n        }\r\n    }, [isAdd])\r\n\r\n    useEffect(function () {\r\n        setTimeout(() => {\r\n            setInfoImg(document.getElementById('con-image')?.getBoundingClientRect())\r\n        }, 1000);\r\n    }, []);\r\n\r\n    const onAddMap = () => {\r\n        if(isAdd){\r\n            setPolygonPoint('');\r\n        }\r\n        setAdd(!isAdd)\r\n    }\r\n\r\n    const drawPoint = (e) => {\r\n        if (isAdd && infoImg) {\r\n            setPolygonPoint(polygonPoint + ' ' + (e.pageX - infoImg.left) + ',' + (e.pageY - infoImg.top + 2))\r\n        }\r\n    }\r\n\r\n    const onMouseOverPoint = (e) => {\r\n        if (isAdd) {\r\n            document.getElementById('con-image').style.cursor = \"pointer\"\r\n            if (infoImg?.width > 0) {\r\n                document.getElementById('con-svg').style.cursor = \"pointer\"\r\n            }\r\n        }\r\n    }\r\n\r\n    const scrollIntoView = (i) => {\r\n        let count = 0\r\n        const len = listArea.length\r\n        while (count < len) {\r\n            document.getElementById(\"area-scroll-\" + count).style.fill = `rgb(${count + 51} ${count + 151} 219 / 57%)`\r\n            count++\r\n        }\r\n        const elmnt = document.getElementById(\"area-scroll-\" + i)\r\n        elmnt.scrollIntoView({\r\n            block: \"start\",\r\n            behavior: \"smooth\"\r\n        });\r\n        elmnt.style.fill = '#DA4567'\r\n    }\r\n\r\n    const showDetailArea = (i) => {\r\n        scrollIntoView(i)\r\n        setDataDetail(listArea[i]);\r\n        setOpenPopup(true);\r\n    }\r\n\r\n    const onSubmit = async () => {\r\n        if (isAdd) {\r\n            try {\r\n                let fd = new FormData()\r\n                fd.append(\"title\", getValues('title'));\r\n                fd.append(\"coordinatesSVG\", polygonPoint);\r\n                fd.append(\"map_id\", getValues('map_id'));\r\n                await axios({\r\n                    method: 'POST',\r\n                    url: process.env.REACT_APP_URL_API + '/add-area',\r\n                    data: fd\r\n                }).then(response => {\r\n                    alert(response.data.success)\r\n                }).catch(function (error) {\r\n                    alert('Error ' + Object.assign({}, error).response?.status);\r\n                })\r\n            } catch (error) {\r\n                console.log('Error', JSON.stringify(error))\r\n            }\r\n            reset();\r\n            setAdd(false);\r\n            setPolygonPoint('');\r\n        }\r\n    }\r\n\r\n    const handleCloseAlert = () => {\r\n        setOpenSuccess(false)\r\n    }\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    return dataMap.length ? (\r\n        <div className={classes.root}>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                }}\r\n                open={isOpenSuccess}\r\n                autoHideDuration={2000}\r\n            >\r\n                <Alert onClose={handleCloseAlert} severity=\"success\">\r\n                    {'Success!'}\r\n                </Alert>\r\n            </Snackbar>\r\n            {\r\n                isOpenPopup ? <DetailAreaDialogs setOpenPopup={setOpenPopup} isOpenPopup={isOpenPopup}\r\n                    dataDetail={dataDetail} setListArea={setListArea} setOpenSuccess={setOpenSuccess}\r\n                /> : ''\r\n            }\r\n            {\r\n                listArea.length > 0 ?\r\n                    <div className={classes.leftMenu}>\r\n                        {\r\n                            listArea.map((item, i) => {\r\n                                return (\r\n                                    <div>\r\n                                        <p onClick={() => scrollIntoView(i)} className={classes.itemArea}>{item.title}</p>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </div> : ''\r\n            }\r\n\r\n            <div>\r\n                <h3>{dataMap[0].title}</h3>\r\n                <div className={classes.conBtn}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onAddMap}>\r\n                        {!isAdd ? \"ThÃªm\" : \"Há»§y\"}\r\n                    </Button>\r\n                    <Button variant=\"contained\" disabled={!isAdd} color=\"primary\" onClick={onSubmit} style={{ marginLeft: 10 }}>\r\n                        {\"Save\"}\r\n                    </Button>\r\n                </div>\r\n                {\r\n                    isAdd ? <form>\r\n                        <TextField\r\n                            className={classes.marginTop10}\r\n                            label=\"Title Area\"\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            required\r\n                            name=\"title\"\r\n                            autoComplete=\"off\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            inputRef={register}\r\n                            onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                        />\r\n                        <input ref={register} name='map_id' type=\"hidden\" />\r\n                    </form> : <div style={{ height: 50 }}></div>\r\n                }\r\n            </div>\r\n            <div className={classes.conImgSvg}>\r\n                {\r\n                    dataMap[0].url_image ? (\r\n                        <div className={`${classes.conImg}`}>\r\n                            <img src={'http://127.0.0.1:8000' + dataMap[0].url_image} ref={imageRef}\r\n                                onClick={drawPoint}\r\n                                onMouseOver={onMouseOverPoint}\r\n                                id={`con-image`} />\r\n                        </div>\r\n                    ) : (<div></div>)\r\n                }\r\n                {\r\n                    (infoImg?.width > 0) ? (\r\n                        <div className={`${classes.SVG} `} id=\"con-svg\" onClick={drawPoint}\r\n                            onMouseOver={onMouseOverPoint}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" height={infoImg.height} width={infoImg.width}>\r\n                                <g fill=\"rgb(50 150 219 / 57%)\" strokeWidth=\"1\" className={`${classes.hoverSVG}`} stroke=\"rgb(50 150 219 / 57%)\">\r\n                                    <polygon points={polygonPoint + \"\"} />\r\n                                </g>\r\n                                {\r\n                                    listArea.length > 0 ?\r\n                                        listArea.map((item, i) => {\r\n                                            return (\r\n                                                <g fill={`rgb(${i + 51} ${i + 151} 219 / 57%)`} className={`${classes.hoverSVG}`}\r\n                                                    strokeWidth=\"1\" stroke={`rgb(${i + 51} ${151 + i} 219 / 57%)`}\r\n                                                    onClick={(e) => showDetailArea(i)} id={\"area-scroll-\" + i}\r\n                                                >\r\n                                                    <polygon points={item.coordinatesSVG + \"\"} />\r\n                                                </g>\r\n                                            )\r\n                                        })\r\n                                        : ''\r\n                                }\r\n                            </svg>\r\n                        </div>\r\n                    ) : ''\r\n                }\r\n            </div>\r\n        </div>\r\n    ) : (<div>Loading...</div>)\r\n}","D:\\Examples\\ReactJS\\manage-map\\src\\reportWebVitals.js",[],"D:\\Examples\\ReactJS\\manage-map\\src\\App.js",["53"],"D:\\Examples\\ReactJS\\manage-map\\src\\home.js",[],"D:\\Examples\\ReactJS\\manage-map\\src\\services\\upload_image.js",[],"D:\\Examples\\ReactJS\\manage-map\\src\\detail\\popup.js",["54","55"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    marginTop10: {\r\n        marginTop: 10\r\n    }\r\n});\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default function DetailAreaDialogs(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(props.isOpenPopup || false);\r\n    const [dataDetail, setDataDetail] = React.useState(props.dataDetail || {});\r\n    const { register, handleSubmit, reset, setValue, getValues } = useForm({\r\n        defaultValues: {\r\n            map_id: props.dataDetail?.map_id || 0,\r\n            title: props.dataDetail?.title || '',\r\n            coordinatesSVG: props.dataDetail?.coordinatesSVG || '',\r\n            acreage: props.dataDetail?.acreage || 0,\r\n            perimeter: props.dataDetail?.perimeter || 0,\r\n            id: props.dataDetail?.id || 0,\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        setOpen(props.isOpenPopup || false)\r\n        setDataDetail(props.dataDetail || {})\r\n    }, [props])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        props.setOpenPopup(false);\r\n    };\r\n\r\n    const onSubmit = async () => {\r\n        try {\r\n            let fd = new FormData()\r\n            fd.append(\"title\", getValues('title'));\r\n            fd.append(\"id\", getValues('id'));\r\n            fd.append(\"acreage\", getValues('acreage'));\r\n            fd.append(\"perimeter\", getValues('perimeter'));\r\n            const res = await axios.put(process.env.REACT_APP_URL_API + '/update-area', getValues());\r\n            if (res.status === 200) {\r\n                setOpen(false);\r\n                props.setOpenPopup(false);\r\n                props.setListArea(res.data.listAreas || []);\r\n                props.setOpenSuccess(true);\r\n            }\r\n        } catch (error) {\r\n            console.log('Error', JSON.stringify(error))\r\n        }\r\n    }\r\n\r\n    if (Object.keys(dataDetail).length > 0 && dataDetail.constructor === Object) {\r\n        return (\r\n            <div>\r\n                <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                        {dataDetail?.title}\r\n                    </DialogTitle>\r\n                    <DialogContent dividers style={{ minWidth: 300 }}>\r\n                        <form>\r\n                            <Typography gutterBottom>\r\n                                <TextField\r\n                                    className={classes.marginTop10}\r\n                                    label=\"Title Area\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    required\r\n                                    name=\"title\"\r\n                                    autoComplete=\"off\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    inputRef={register}\r\n                                    onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                />\r\n                            </Typography>\r\n\r\n                            <Typography gutterBottom>\r\n                                <input ref={register} type=\"hidden\" name=\"coordinatesSVG\" />\r\n                                <input ref={register} type=\"hidden\" name=\"map_id\" />\r\n                                <input ref={register} type=\"hidden\" name=\"id\" />\r\n                            </Typography>\r\n\r\n                            <Typography gutterBottom>\r\n                                <TextField\r\n                                    className={classes.marginTop10}\r\n                                    label=\"Diá»n tÃ­ch\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    name=\"acreage\"\r\n                                    autoComplete=\"off\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    inputRef={register}\r\n                                    onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                />\r\n                            </Typography>\r\n\r\n                            <Typography gutterBottom>\r\n                                <TextField\r\n                                    className={classes.marginTop10}\r\n                                    label=\"Chu Vi\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    name=\"perimeter\"\r\n                                    autoComplete=\"off\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    inputRef={register}\r\n                                    onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                />\r\n                            </Typography>\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            {'ÄÃ³ng'}\r\n                        </Button>\r\n                        <Button onClick={() => reset()} color=\"primary\">\r\n                            {'Reset'}\r\n                        </Button>\r\n                        <Button onClick={onSubmit} color=\"primary\">\r\n                            {'LÆ°u'}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},{"ruleId":"60","severity":1,"message":"64","line":10,"column":42,"nodeType":"62","messageId":"63","endLine":10,"endColumn":51},{"ruleId":"60","severity":1,"message":"65","line":68,"column":23,"nodeType":"62","messageId":"63","endLine":68,"endColumn":35},{"ruleId":"60","severity":1,"message":"66","line":68,"column":44,"nodeType":"62","messageId":"63","endLine":68,"endColumn":52},{"ruleId":"60","severity":1,"message":"67","line":78,"column":12,"nodeType":"62","messageId":"63","endLine":78,"endColumn":21},{"ruleId":"60","severity":1,"message":"68","line":85,"column":17,"nodeType":"62","messageId":"63","endLine":85,"endColumn":23},{"ruleId":"69","severity":1,"message":"70","line":105,"column":8,"nodeType":"71","endLine":105,"endColumn":15,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"70","line":125,"column":8,"nodeType":"71","endLine":125,"endColumn":15,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":276,"column":29,"nodeType":"76","endLine":279,"endColumn":52},{"ruleId":"60","severity":1,"message":"77","line":7,"column":3,"nodeType":"62","messageId":"63","endLine":7,"endColumn":7},{"ruleId":"60","severity":1,"message":"65","line":65,"column":23,"nodeType":"62","messageId":"63","endLine":65,"endColumn":35},{"ruleId":"60","severity":1,"message":"66","line":65,"column":44,"nodeType":"62","messageId":"63","endLine":65,"endColumn":52},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getValues' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'setValue' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setSVG' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["80"],["81"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [id, props]",{"range":"86","text":"87"},"Update the dependencies array to be: [id, isAdd]",{"range":"88","text":"89"},[3291,3298],"[id, props]",[4045,4052],"[id, isAdd]"]